#!/usr/bin/env python3
"""
üöÄ SCRIPT DE D√âPLOIEMENT AUTOMATIQUE
Pr√©pare et guide le d√©ploiement sur GitHub + Render
"""

import os
import subprocess
import sys

def print_banner():
    print("üöÄ BOUTIQUE MOBILE - D√âPLOIEMENT AUTOMATIQUE")
    print("=" * 60)
    print("üì± Application de gestion d'inventaire")
    print("üåê D√©ploiement sur GitHub + Render")
    print()

def check_git():
    """V√©rifie si Git est install√©"""
    try:
        subprocess.run(['git', '--version'], capture_output=True, check=True)
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        return False

def init_git_repo():
    """Initialise le repository Git"""
    print("üìÅ Initialisation du repository Git...")
    
    try:
        # Initialiser le repo
        subprocess.run(['git', 'init'], check=True)
        print("‚úÖ Repository Git initialis√©")
        
        # Ajouter tous les fichiers
        subprocess.run(['git', 'add', '.'], check=True)
        print("‚úÖ Fichiers ajout√©s au staging")
        
        # Premier commit
        subprocess.run(['git', 'commit', '-m', 'Initial commit - Boutique Mobile App'], check=True)
        print("‚úÖ Premier commit cr√©√©")
        
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erreur Git: {e}")
        return False

def list_files():
    """Liste tous les fichiers du projet"""
    print("üìã FICHIERS DU PROJET:")
    print("-" * 30)
    
    files = []
    for root, dirs, filenames in os.walk('.'):
        # Ignorer les dossiers cach√©s
        dirs[:] = [d for d in dirs if not d.startswith('.')]
        
        for filename in filenames:
            if not filename.startswith('.'):
                filepath = os.path.join(root, filename)
                files.append(filepath)
    
    # Organiser par type
    templates = [f for f in files if 'templates' in f]
    config_files = [f for f in files if f.endswith(('.txt', '.yaml', '.md', '.py'))]
    
    print("üé® Templates HTML:")
    for f in sorted(templates):
        print(f"   {f}")
    
    print("\n‚öôÔ∏è Fichiers de configuration:")
    for f in sorted(config_files):
        if 'templates' not in f:
            print(f"   {f}")
    
    print(f"\nüìä Total: {len(files)} fichiers")
    return len(files)

def check_requirements():
    """V√©rifie les fichiers requis"""
    print("\nüîç V√âRIFICATION DES FICHIERS REQUIS:")
    print("-" * 40)
    
    required_files = [
        'app.py',
        'requirements.txt',
        'runtime.txt',
        'README.md',
        'templates/index.html',
        'templates/produits.html',
        'templates/ajouter.html',
        'templates/modifier.html',
        'templates/scanner.html',
        'templates/statistiques.html',
        'templates/codes_barres.html',
        'templates/ruptures.html',
        'templates/stock_faible.html',
        'templates/error.html'
    ]
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - MANQUANT")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ö†Ô∏è {len(missing_files)} fichier(s) manquant(s)")
        return False
    else:
        print(f"\n‚úÖ Tous les fichiers requis sont pr√©sents ({len(required_files)} fichiers)")
        return True

def show_deployment_guide():
    """Affiche le guide de d√©ploiement"""
    print("\nüåê GUIDE DE D√âPLOIEMENT SUR RENDER:")
    print("=" * 50)
    
    print("\n1Ô∏è‚É£ CR√âER UN REPOSITORY GITHUB:")
    print("   ‚Ä¢ Allez sur https://github.com")
    print("   ‚Ä¢ Cliquez 'New repository'")
    print("   ‚Ä¢ Nom: 'boutique-mobile' (ou autre)")
    print("   ‚Ä¢ Public ou Private")
    print("   ‚Ä¢ Ne pas initialiser avec README")
    print("   ‚Ä¢ Cr√©er le repository")
    
    print("\n2Ô∏è‚É£ POUSSER LE CODE:")
    print("   ‚Ä¢ Copiez l'URL de votre repository")
    print("   ‚Ä¢ Ex√©cutez ces commandes:")
    print("     git remote add origin https://github.com/USERNAME/boutique-mobile.git")
    print("     git branch -M main")
    print("     git push -u origin main")
    
    print("\n3Ô∏è‚É£ D√âPLOYER SUR RENDER:")
    print("   ‚Ä¢ Allez sur https://render.com")
    print("   ‚Ä¢ Connectez-vous / Cr√©ez un compte")
    print("   ‚Ä¢ Cliquez 'New +' ‚Üí 'Web Service'")
    print("   ‚Ä¢ Connectez votre repository GitHub")
    print("   ‚Ä¢ S√©lectionnez 'boutique-mobile'")
    
    print("\n4Ô∏è‚É£ CONFIGURATION RENDER:")
    print("   ‚Ä¢ Name: boutique-mobile")
    print("   ‚Ä¢ Environment: Python 3")
    print("   ‚Ä¢ Build Command: pip install -r requirements.txt")
    print("   ‚Ä¢ Start Command: gunicorn app:app")
    print("   ‚Ä¢ Instance Type: Free")
    
    print("\n5Ô∏è‚É£ BASE DE DONN√âES:")
    print("   ‚Ä¢ Dans Render, cliquez 'New +' ‚Üí 'PostgreSQL'")
    print("   ‚Ä¢ Name: boutique-mobile-db")
    print("   ‚Ä¢ Plan: Free")
    print("   ‚Ä¢ Cr√©er la base")
    print("   ‚Ä¢ Copiez l'URL de connexion")
    
    print("\n6Ô∏è‚É£ VARIABLES D'ENVIRONNEMENT:")
    print("   ‚Ä¢ Dans votre Web Service ‚Üí Environment")
    print("   ‚Ä¢ Ajoutez: DATABASE_URL = [URL PostgreSQL]")
    
    print("\n7Ô∏è‚É£ D√âPLOIEMENT:")
    print("   ‚Ä¢ Cliquez 'Create Web Service'")
    print("   ‚Ä¢ Attendez le build (5-10 minutes)")
    print("   ‚Ä¢ Votre app sera sur: https://boutique-mobile-XXXX.onrender.com")

def main():
    print_banner()
    
    # V√©rifier Git
    if not check_git():
        print("‚ùå Git n'est pas install√©. Installez Git d'abord.")
        print("   T√©l√©chargez sur: https://git-scm.com/")
        return
    
    # Lister les fichiers
    file_count = list_files()
    
    # V√©rifier les fichiers requis
    if not check_requirements():
        print("\n‚ùå Des fichiers sont manquants. V√©rifiez votre installation.")
        return
    
    print(f"\n‚úÖ PROJET PR√äT POUR LE D√âPLOIEMENT!")
    print(f"üìÅ {file_count} fichiers pr√©par√©s")
    print("üöÄ Application compl√®te avec toutes les fonctionnalit√©s")
    
    # Demander si on initialise Git
    response = input("\nü§î Voulez-vous initialiser le repository Git ? (o/n): ").lower()
    if response in ['o', 'oui', 'y', 'yes']:
        if init_git_repo():
            print("\n‚úÖ Repository Git pr√™t!")
        else:
            print("\n‚ùå Erreur lors de l'initialisation Git")
    
    # Afficher le guide
    show_deployment_guide()
    
    print("\nüéâ F√âLICITATIONS!")
    print("Votre application Boutique Mobile est pr√™te √† √™tre d√©ploy√©e!")
    print("Suivez le guide ci-dessus pour la mettre en ligne.")
    print("\nüì± Fonctionnalit√©s incluses:")
    print("   ‚úÖ Gestion compl√®te des produits")
    print("   ‚úÖ Scanner codes-barres (cam√©ra + douchette)")
    print("   ‚úÖ Filtres et tris avanc√©s")
    print("   ‚úÖ Statistiques avec graphiques")
    print("   ‚úÖ Alertes automatiques")
    print("   ‚úÖ Export CSV")
    print("   ‚úÖ Interface moderne et responsive")
    print("   ‚úÖ Base de donn√©es persistante")
    
    print("\nüåê Une fois d√©ploy√©e, votre app sera accessible partout!")

if __name__ == "__main__":
    main()
